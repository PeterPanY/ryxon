import{_ as s,o as n,c as o,a}from"./app.04ba8a2e.js";const u=JSON.parse('{"title":"介绍","description":"","frontmatter":{"title":"介绍","lang":"zh"},"headers":[{"level":2,"title":"支持深色模式","slug":"支持深色模式","link":"#支持深色模式","children":[]},{"level":2,"title":"按需引入方式","slug":"按需引入方式","link":"#按需引入方式","children":[]}],"relativePath":"zh/guide/home.md"}'),e={name:"zh/guide/home.md"},l=a(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h1><p>Ryxon 是一个<strong>轻量、可定制的组件库</strong></p><p>Ryxon 支持了<strong>深色模式</strong></p><h2 id="支持深色模式" tabindex="-1">支持深色模式 <a class="header-anchor" href="#支持深色模式" aria-hidden="true">#</a></h2><p><strong>Ryxon 支持切换所有组件为深色模式。</strong></p><p>只需要把 <a href="/ryxon/zh/component/config-provider.html">ConfigProvider 组件</a>的 <code>theme</code> 属性设置为 <code>dark</code>，即可切换为深色模式，将页面上的所有 Ryxon 组件变成深色风格。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">r-config-provider</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">theme</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dark</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- child components --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">r-config-provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Ryxon 文档也已支持切换为深色模式。</p><h2 id="按需引入方式" tabindex="-1">按需引入方式 <a class="header-anchor" href="#按需引入方式" aria-hidden="true">#</a></h2><p><strong>Ryxon 不再使用 babel-plugin-import 实现按需引入。</strong></p><p>在早期，组件库大多使用 <code>babel-plugin-import</code> 实现按需引入，这意味着组件库会强依赖 Babel 编译。从 Ryxon 开始，将不再支持 <code>babel-plugin-import</code>，主要带来以下收益：</p><ul><li><p>不再强依赖 Babel 编译，项目可以使用 SWC、esbuild 等现代编译工具，进而提升编译效率。</p></li><li><p>不再受到 <code>babel-plugin-import</code> 的 import 限制，可以从 Ryxon 中导入除组件以外的内容，比如 Ryxon 中新增的 <code>showMessage</code> 方法，或是 <code>buttonProps</code> 对象：</p></li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">showMessage</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buttonProps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ryxon</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>在包体积方面，移除 <code>babel-plugin-import</code> 对项目的 JS 体积不会有影响，因为 Ryxon 默认支持通过 Tree Shaking 来移除不需要的 JS 代码，而 CSS 代码可以通过 <a href="https://github.com/antfu/unplugin-vue-components" target="_blank" rel="noreferrer">unplugin-vue-components</a> 插件实现按需引入，详细用法请参考 <a href="/ryxon/zh/guide/quickstart.html#按需引入">「快速开始」</a>。</p>`,14),t=[l];function p(r,c,i,d,h,y){return n(),o("div",null,t)}const D=s(e,[["render",p]]);export{u as __pageData,D as default};
